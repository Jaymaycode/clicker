import tkinter as tk

class BoxGame:
    def __init__(self, root, title, score_multiplier=1, upgrade_multiplier=1, transfer_score_callback=None):
        self.root = root
        self.root.title(title)
        self.transfer_score_callback = transfer_score_callback
        self.score = 0
        self.score_per_click = 1
        self.score_multiplier = score_multiplier
        self.upgrade_multiplier = upgrade_multiplier
        self.auto_increment_cost = 50 * upgrade_multiplier
        self.auto_increment_active = False
        self.auto_increment_amount = 0.1 * score_multiplier
        self.auto_increment_speed = 1000  # in milliseconds
        self.min_increment_speed = 100  # minimum speed limit
        self.reset_cost = 100
        self.reset_count = 0
        self.base_increment_amount = 0.1  # Base amount for auto-increment
        self.upgrade_cost = 10 * upgrade_multiplier
        self.speed_upgrade_cost = 30 * upgrade_multiplier
        self.amount_upgrade_cost = 40 * upgrade_multiplier
        self.setup_ui()

    def setup_ui(self):
        box_btn = tk.Button(self.root, text="ðŸ“¦ Box", command=lambda: self.update_score(self.score_per_click))
        box_btn.pack()

        self.score_label = tk.Label(self.root, text="Score: 0")
        self.score_label.pack()

        self.upgrade_button = tk.Button(self.root, text=f"Upgrade Click (Cost: {self.upgrade_cost})", command=self.purchase_click_upgrade)
        self.upgrade_button.pack()

        self.auto_increment_button = tk.Button(self.root, text=f"Buy Auto-Increment (Cost: {self.auto_increment_cost})", command=self.purchase_auto_increment)
        self.auto_increment_button.pack()

        self.speed_upgrade_button = tk.Button(self.root, text=f"Upgrade Speed (Cost: {self.speed_upgrade_cost})", command=self.upgrade_speed)
        self.speed_upgrade_button.pack()

        self.amount_upgrade_button = tk.Button(self.root, text=f"Upgrade Amount (Cost: {self.amount_upgrade_cost})", command=self.upgrade_amount)
        self.amount_upgrade_button.pack()

        self.reset_button = tk.Button(self.root, text=f"Reset (Cost: {self.reset_cost})", command=self.reset_game)
        self.reset_button.pack()

        self.reset_count_label = tk.Label(self.root, text="Resets: 0")
        self.reset_count_label.pack()

        if self.root.title() != "The Box":
            transfer_button = tk.Button(self.root, text="Transfer Score to The Box", command=self.transfer_score)
            transfer_button.pack()

            close_box_button = tk.Button(self.root, text="Close Box", command=self.close_box)
            close_box_button.pack()

    def update_score(self, amount=1):
        self.score += amount * self.score_multiplier
        rounded_score = round(self.score)
        self.score_label.config(text="Score: " + str(rounded_score))

    def auto_increment(self):
        if self.auto_increment_active:
            self.update_score(self.auto_increment_amount)
            self.root.after(self.auto_increment_speed, self.auto_increment)

    def purchase_click_upgrade(self):
        if self.score >= self.upgrade_cost:
            self.score -= self.upgrade_cost
            self.score_per_click += 1
            self.upgrade_cost *= 2
            self.upgrade_button.config(text=f"Upgrade Click (Cost: {self.upgrade_cost})")
            self.update_score(0)

    def purchase_auto_increment(self):
        if self.score >= self.auto_increment_cost and not self.auto_increment_active:
            self.score -= self.auto_increment_cost
            self.auto_increment_active = True
            self.auto_increment_button.config(text="Auto-Increment Active", state=tk.DISABLED)
            self.auto_increment()

    def upgrade_speed(self):
        if self.score >= self.speed_upgrade_cost and self.auto_increment_speed > self.min_increment_speed:
            self.score -= self.speed_upgrade_cost
            self.auto_increment_speed -= 100  # Decrease interval by 100ms
            self.speed_upgrade_cost *= 2
            self.speed_upgrade_button.config(text=f"Upgrade Speed (Cost: {self.speed_upgrade_cost})")
            self.update_score(0)

    def upgrade_amount(self):
        if self.score >= self.amount_upgrade_cost:
            self.score -= self.amount_upgrade_cost
            self.auto_increment_amount += 0.1  # Increase amount per auto-click
            self.amount_upgrade_cost *= 2
            self.amount_upgrade_button.config(text=f"Upgrade Amount (Cost: {self.amount_upgrade_cost})")
            self.update_score(0)

    def reset_game(self):
        if self.score >= self.reset_cost:
            self.score = 0
            self.score_per_click = 1
            self.auto_increment_active = False
            self.auto_increment_speed = max(self.auto_increment_speed // 2, self.min_increment_speed)  # Double the speed, respecting minimum limit
            self.auto_increment_button.config(text="Buy Auto-Increment (Cost: 50)", state=tk.NORMAL)
            self.reset_cost *= 3
            self.reset_count += 1
            self.auto_increment_amount = self.base_increment_amount * (2 ** self.reset_count)
            self.reset_button.config(text=f"Reset (Cost: {self.reset_cost})")
            self.reset_count_label.config(text=f"Resets: {self.reset_count}")
            self.update_score(0)

    def transfer_score(self):
        if self.transfer_score_callback:
            self.transfer_score_callback(self.score)
            self.score = 0
            self.update_score(0)

    def close_box(self):
        if self.transfer_score_callback:
            self.transfer_score_callback(self.score * 3)  # Transfer and triple the score
            self.root.destroy()

def open_new_box(new_box_cost, update_new_box_cost, transfer_score_to_main, main_game):
    if main_game.score >= new_box_cost:  # Check if the player has enough score
        main_game.score -= new_box_cost  # Subtract the cost
        main_game.update_score(0)
        new_box_root = tk.Toplevel()
        new_box_multiplier = main_game.score_per_click * 3  # Triple the current score rate of 'The Box'
        new_box_game = BoxGame(new_box_root, "New Box", score_multiplier=new_box_multiplier, upgrade_multiplier=2, transfer_score_callback=transfer_score_to_main)
        update_new_box_cost(new_box_cost * 3)

def transfer_score_to_main(amount):
    main_game.score += amount
    main_game.update_score(0)

def update_new_box_cost(new_cost):
    new_box_button.config(text=f"New Box (Cost: {new_cost})", command=lambda: open_new_box(new_cost, update_new_box_cost, transfer_score_to_main, main_game))

# Main game setup
main_root = tk.Tk()
main_game = BoxGame(main_root, "The Box")

# New Box upgrade button
new_box_button = tk.Button(main_root, text="New Box (Cost: 1000)", command=lambda: open_new_box(1000, update_new_box_cost, transfer_score_to_main, main_game))
new_box_button.pack()

main_root.mainloop()
